1) In our class we saw that the java compiler seems to consider the actual 
type of an exception instead of just the declared type. Here's the code:

class blah{
	public void someMethod(){
		try{
			throw new NullPointerException();
		}
		catch(Throwable t){
			System.out.println("Caught!");
			throw t;
		}
	}
}

You'd think that this class wouldn't compile, because t is declared to be 
Throwable and that's a checked exception, but the code compiles just fine 
because the actual type of t is an unchecked exception. On the other hand, 
if you were to throw a checked exception in the try block, the code will 
fail to compile because 't' is now a checked exception that you failed to 
declare in your method. Find out why this happens. Make sure that you 
provide sources.
--------------------------------------------------------------------------------------
Answer: "What Java won't let you do is compile your new method if 
		it uses a method that has been declared as throwing exception(s), 
		unless you either handle the declared exception(s) in your method or
		declare your method as throwing the same exception(s) or
		if there are multiple exceptions, you can handle some and throw the rest."
Source: https://stackoverflow.com/questions/11589302/why-is-throws-exception-necessary-when-calling-a-function		
